// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  vehicles      Vehicle[]
  maintenances  Maintenance[]
  expenses      Expense[]
  insurances    Insurance[]
  posts         Post[]
  replies       Reply[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vehicle {
  id           String   @id @default(cuid())
  make         String
  model        String
  year         Int
  plate        String?
  color        String?
  vin          String?
  mileage      Int?
  fuelType     String?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  maintenances Maintenance[]
  expenses     Expense[]
  insurances   Insurance[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Maintenance {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String
  status      String   @default("pending")
  dueDate     DateTime
  cost        Float?
  mileage     Int?
  notes       String?
  vehicleId   String
  userId      String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Expense {
  id            String   @id @default(cuid())
  description   String
  amount        Float
  date          DateTime
  category      String
  shop          String?
  paymentMethod String   @default("card")
  vehicleId     String?
  userId        String
  vehicle       Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Insurance {
  id           String   @id @default(cuid())
  company      String
  policyNumber String
  type         String
  premium      Float
  startDate    DateTime
  endDate      DateTime
  status       String   @default("active")
  coverage     String   // JSON string o separado por comas
  vehicleId    String
  userId       String
  vehicle      Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  tags      String   // JSON string o separado por comas
  likes     Int      @default(0)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies   Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  likes     Int      @default(0)
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
